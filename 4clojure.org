#+TITLE: 4clojure exercises
#+PROPERTY: header-args :results value :cache yes

** 1. Nothing but the Truth

This is a clojure form.
Enter a value which will make the form evaluate to true.
Don't over think it! If you are confused, see the getting started page.
Hint: true is equal to true.

(= __ true)

#+BEGIN_SRC clojure
(= true true)
#+END_SRC

#+RESULTS[52b7f17b98a06df8629b472f30c047dbd738776a]:
: true

** 2. Simple Math

If you are not familiar with polish notation, simple arithmetic might seem confusing.

Note: Enter only enough to fill in the blank (in this case, a single number) - do not retype the whole problem.

(= (- 10 (* 2 3)) __)

#+BEGIN_SRC clojure
(= (- 10 (* 2 3)) 4)
#+END_SRC

#+RESULTS[57ff88f2768d63790ebead825d95ea5be1dec127]:
: true

** 3. Intro to Strings

Clojure strings are Java strings.
This means that you can use any of the Java string methods on Clojure strings.

(= __ (.toUpperCase "hello world"))

#+BEGIN_SRC clojure
(= "HELLO WORLD" (.toUpperCase "hello world"))
#+END_SRC

** 4. Intro to Lists

Lists can be constructed with either a function or a quoted form.

(= (list __) '(:a :b :c))

#+BEGIN_SRC clojure
(= (list :a :b :c) '(:a :b :c))
#+END_SRC

** 5. Lists: conj

When operating on a list, the conj function will return
a new list with one or more items "added" to the front.

Note that there are two test cases,
but you are expected to supply only one answer,
which will cause all the tests to pass.

(= __ (conj '(2 3 4) 1))
(= __ (conj '(3 4) 2 1))

#+BEGIN_SRC clojure
(= '(1 2 3 4) (conj '(2 3 4) 1))
(= '(1 2 3 4) (conj '(3 4) 2 1))
#+END_SRC

** 6. Intro to Vectors

Vectors can be constructed several ways. You can compare them with lists.
Note: the brackets [] surrounding the blanks __ are part of the test case.

(= [__] (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))

#+BEGIN_SRC clojure
(= [:a :b :c] (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))
#+END_SRC

** 7. Vectors: conj

When operating on a Vector, the conj function will return
a new vector with one or more items "added" to the end.

(= __ (conj [1 2 3] 4))
(= __ (conj [1 2] 3 4))

#+BEGIN_SRC clojure
(= [1 2 3 4] (conj [1 2 3] 4))
(= [1 2 3 4] (conj [1 2] 3 4))
#+END_SRC

** 8. Intro to Sets

Sets are collections of unique values.

(= __ (set '(:a :a :b :c :c :c :c :d :d)))
(= __ (clojure.set/union #{:a :b :c} #{:b :c :d}))

#+BEGIN_SRC clojure
(= #{:a :b :c :d} (set '(:a :a :b :c :c :c :c :d :d)))
(= #{:a :b :c :d} (clojure.set/union #{:a :b :c} #{:b :c :d}))
#+END_SRC

** 9. Sets: conj

When operating on a set, the conj function returns
a new set with one or more keys "added".

(= #{1 2 3 4} (conj #{1 4 3} __))

#+BEGIN_SRC clojure
(= #{1 2 3 4} (conj #{1 4 3} 2))
#+END_SRC

** 10. Intro to Maps

Maps store key-value pairs.
Both maps and keywords can be used as lookup functions.
Commas can be used to make maps more readable, but they are not required.

(= __ ((hash-map :a 10, :b 20, :c 30) :b))
(= __ (:b {:a 10, :b 20, :c 30}))

#+BEGIN_SRC clojure
(= 20 ((hash-map :a 10, :b 20, :c 30) :b))
(= 20 (:b {:a 10, :b 20, :c 30}))
#+END_SRC

** 11. Maps: conj

When operating on a map, the conj function returns
a new map with one or more key-value pairs "added".

(= {:a 1, :b 2, :c 3} (conj {:a 1} __ [:c 3]))

#+BEGIN_SRC clojure
(= {:a 1, :b 2, :c 3} (conj {:a 1} [:b 2] [:c 3]))
#+END_SRC

** 12. Intro to Sequences

All Clojure collections support sequencing.
You can operate on sequences with functions like first, second, and last.

(= __ (first '(3 2 1)))
(= __ (second [2 3 4]))
(= __ (last (list 1 2 3)))

#+BEGIN_SRC clojure
(= 3 (first '(3 2 1)))
(= 3 (second [2 3 4]))
(= 3 (last (list 1 2 3)))
#+END_SRC

** 13. Sequences: rest

The rest function will return all the items of a sequence except the first.

(= __ (rest [10 20 30 40]))

#+BEGIN_SRC clojure
(= [20 30 40] (rest [10 20 30 40]))
#+END_SRC

** 14. Intro to Functions

Clojure has many different ways to create functions.

(= __ ((fn add-five [x] (+ x 5)) 3))
(= __ ((fn [x] (+ x 5)) 3))
(= __ (#(+ % 5) 3))
(= __ ((partial + 5) 3))

#+BEGIN_SRC clojure
(= 8 ((fn add-five [x] (+ x 5)) 3))
(= 8 ((fn [x] (+ x 5)) 3))
(= 8 (#(+ % 5) 3))
(= 8 ((partial + 5) 3))
#+END_SRC

** 15. Double Down

Write a function which doubles a number.

(= (__ 2) 4)
(= (__ 2) 4)
(= (__ 3) 6)
(= (__ 11) 22)
(= (__ 7) 14)

#+BEGIN_SRC clojure
(= (#(* % 2) 2) 4)
#+END_SRC

** 16. Hello World

Write a function which returns a personalized greeting.

(= (__ "Dave") "Hello, Dave!")
(= (__ "Jenn") "Hello, Jenn!")
(= (__ "Rhea") "Hello, Rhea!")

#+BEGIN_SRC clojure
(= (#(str "Hello, " % "!") "Dave") "Hello, Dave!")
#+END_SRC

** 17. Sequences: map

The map function takes two arguments: a function (f) and a sequence (s).
Map returns a new sequence consisting of the result of
applying f to each item of s.
Do not confuse the map function with the map data structure.

(= __ (map #(+ % 5) '(1 2 3)))

#+BEGIN_SRC clojure
(= [6 7 8] (map #(+ % 5) '(1 2 3)))
#+END_SRC

** 18. Sequences: filter

The filter function takes two arguments:
a predicate function (f) and a sequence (s).
Filter returns a new sequence consisting of all
the items of s for which (f item) returns true.

(= __ (filter #(> % 5) '(3 4 5 6 7)))

#+BEGIN_SRC clojure
(= [6 7] (filter #(> % 5) '(3 4 5 6 7)))
#+END_SRC

** 19. Last Element

Write a function which returns the last element in a sequence.

(= (__ [1 2 3 4 5]) 5)
(= (__ '(5 4 3)) 3)
(= (__ ["b" "c" "d"]) "d")

#+BEGIN_SRC clojure
(= (#(first (reverse %)) [1 2 3 4 5]) 5)
#+END_SRC

** 20. Penultimate Element

Write a function which returns the second to last element from a sequence.

(= (__ (list 1 2 3 4 5)) 4)
(= (__ ["a" "b" "c"]) "b")
(= (__ [[1 2] [3 4]]) [1 2])

#+BEGIN_SRC clojure
(= (#(second (reverse %)) (list 1 2 3 4 5)) 4)
#+END_SRC

** 21. Nth Element

Write a function which returns the Nth element from a sequence.

(= (__ '(4 5 6 7) 2) 6)
(= (__ [:a :b :c] 0) :a)
(= (__ [1 2 3 4] 1) 2)
(= (__ '([1 2] [3 4] [5 6]) 2) [5 6])

#+BEGIN_SRC clojure
(= (#(first (drop %2 %1)) '(4 5 6 7) 2) 6)
#+END_SRC
