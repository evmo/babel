#+TITLE: Clojure Workshop

* Chapter 1: Hello REPL!

#+BEGIN_SRC clojure
(def base-co2 382)
(def base-year 2006)

(defn co2-estimate
  "Returns an estimate of atmospheric carbon dioxide in PPM."
  [year]
  (let [year-diff (- year 2006)]
   (+ 382 (* 2 year-diff ))))

(co2-estimate 2050)
#+END_SRC

#+RESULTS:
| #'user/base-co2     |
| #'user/base-year    |
| #'user/co2-estimate |
| 470                 |

** Truthiness, nil, and equality

- ~false~ and ~nil~ are "falsey"
- everything else (including zero and the empty list) is "truthy"

predicate functions: true?, false?, nil?

- ~and~ returns the first falsey value encountered. If all values are truthy, it returns the last value.
- ~or~ returns the first truthy value, or if all are falsey, the last value.

Write a function that returns "Valid" if x is between 1 and 100 (inclusive) OR a multiple of 100, or "Invalid" otherwise.

#+BEGIN_SRC clojure
(defn valid-num [x]
  (if (or (<= 1 x 100)
          (= 0 (mod x 100)))
    "Valid"
    "Invalid"))

(valid-num 55)
(valid-num 170)
(valid-num 200)
#+END_SRC

#+RESULTS:
| #'user/valid-num |
| "Valid"          |
| "Invalid"        |
| "Valid"          |

** meditate

#+BEGIN_SRC clojure
(require '[clojure.string :as stg])

(defn meditate
  "Return a transformation of a string `s`
   based on `calmness-level`"
  [s calmness-level]
  (cond
    (< calmness-level 5)
     (stg/upper-case (str s ", I TELL YA!"))
    (<= 5 calmness-level 9)
     (stg/capitalize s)
    (= 10 calmness-level)
     (stg/reverse s)))

(meditate "the dude abides" 1)
(meditate "the dude abides" 6)
(meditate "the dude abides" 10)
#+END_SRC

#+RESULTS:
| #'user/meditate               |
| "THE DUDE ABIDES, I TELL YA!" |
| "The dude abides"             |
| "sediba edud eht"             |

* Chapter 2: Data Types & Immutability

Simple, immutable data types:

** strings

- "This is a string"
- At Java level, a collection of characters

*** string functions:

#+BEGIN_SRC clojure :results output
(clojure.repl/dir clojure.string)
#+END_SRC

#+RESULTS:
#+begin_example
blank?
capitalize
ends-with?
escape
includes?
index-of
join
last-index-of
lower-case
re-quote-replacement
replace
replace-first
reverse
split
split-lines
starts-with?
trim
trim-newline
triml
trimr
upper-case
#+end_example

** numbers

- implemented as java.lang.Long
- rations represented literally: 5/4
- decimals are "double" floating-point
- combining float & int produces a float

Using Java math libraries:

#+BEGIN_SRC clojure
(Math/random)
(Math/sqrt 9)
(Math/round 0.7)
#+END_SRC

#+RESULTS:
| 0.8761892477268161 |
|                3.0 |
|                  1 |

** Obfuscation Machine

#+BEGIN_SRC clojure
(clojure.string/replace
 "Hello World"
 #"\w"
 (fn [letter]
   (do (println letter) "!")))
#+END_SRC

#+RESULTS:
: !!!!! !!!!!

Write an ~encode~ function that, for each letter in a word:

- get the char's ASCII value
- add to that number the # of words in the sentence
- get the square of that number

Clojure functions to use: char-array, first, int, Math/pow, clojure.string/replace, clojure.string/split, count

First, write a function to encode a single letter.

#+BEGIN_SRC clojure
(defn encode-letter1
  [s x]
  (str "#"
       (int (Math/pow
             (+ x (int (first (char-array s))))
             2))))

; now using `let` to get an intermediate value for the code
(defn encode-letter
  [s x]
  (let [code
    (Math/pow (+ (int (first (char-array s)))) 2)]
    (str "#" (int code))))

(encode-letter1 "a" 2)
(encode-letter "a" 3)
#+END_SRC

#+RESULTS:
| #'user/encode-letter1 |
| #'user/encode-letter  |
| "#9801"               |
| "#9409"               |

Then, encode the sentence by:

- Replacing each letter with the result of ~encode-letter~.
- Get # of words in sentence by splitting the string on '#'

#+BEGIN_SRC clojure
(require '[clojure.string :as stg])

(defn encode
  [s]
  (let [number-of-words (count (stg/split s #"\w"))]
    (stg/replace s #"\w"
      (fn [s] (encode-letter s number-of-words)))))

(encode "Super secret")
#+END_SRC

#+RESULTS:
| #'user/encode                                                       |
| "#6889#13689#12544#10201#12996 #13225#10201#9801#12996#10201#13456" |
