#+TITLE: Little Schemer

* Chapter 1: Toys

- ~atom~: string of 1+ character(s)
- ~list~: collection of 0+ atoms or S-expressions enclosed by parentheses
  + () is the null list
- ~car~ first atom or S-expr in a non-empty list
- ~cons~ adds an atom or S-expr to the front of a list
- ~atom?~ takes 1 arg and returns whether any S-expr is an atom (T or F)
- ~eq?~  takes 2 args (non-numeric atoms) and returns whether they're equal

** Laws
- *Law of Car*: the primitive ~car~ is defined only for non-empty lists
- *Law of Cdr*: the primitive ~cdr~ is defined only for non-empty lists. The cdr of any non-empty list of always another list.
- *Law of Cons*: The primitive ~cons~ takes two arguments. The second argument to cons must be a list. The result is a list.
- *Law of Null?*: The primitive ~null?~ is defined only for lists.
- *Law of Eq?*: The primitive ~eq?~ takes two args. Each must be a non-numeric atom.

#+BEGIN_SRC scheme :session
(define atom?
  (lambda (x)
    (and (not (pair? x)) (not (null? x)))))

(atom? 2)
#+END_SRC

#+RESULTS:
: #t

* Chapter 2: Do it, do it again, and again, and again

- ~cond~: asks questions
- ~lambda~: creates a function
- ~define~: gives it a name

** lat? (list of atoms)

#+BEGIN_SRC scheme :session
(define lat?
  (lambda (l)
    (cond
      ((null? l) #t)
      ((atom? (car l)) (lat? (cdr l)))
      (else #f))))
#+END_SRC

#+RESULTS:
: #<unspecified>

** cond

#+begin_quote cite="https://stackoverflow.com/a/47265444/9375330"
cond is a special form, that takes (roughly) the form

(cond
  ((test-expression) (then-expression))
  ((test-expression2) (then-expression2))
  (else
   (then-expression3)))

Its semantics is that it will evaluate the test-expressions in order, and for the first one that it finds to evaluate to #t (the true value), then it will evaluate its associated then-expression and return its value.

If all the test-expressions evaluate to #f (the false value), and an else clause is present, then it will evaluate its associated then-expression3 in this case, and return its value.
#+end_quote

*else* is a question whose value is always true

** or

~(or expr expr)~

** member?

#+BEGIN_SRC scheme :session
(define member?
  (lambda (a lat)
    (cond
     ((null? lat) #f)
     (else (or (eq? (car lat) a)
               (member? a (cdr lat)))))))

(define lat '(mashed potatoes and meat gravy))
(define a 'meat)
(member? a lat)
#+END_SRC

#+RESULTS:
: #t

** First Commandment (prelim)

Always ask ~null?~ as the first question in expressing any function.

* Chapter 3: Cons the Magnificent

** Second Commandment

Use ~cons~ to build lists.

** rember (remove a member)

- args: atom, lat
- return: new lat with the /first/ occurrence of the atom in the old lat removed


#+BEGIN_SRC scheme :session
(define rember
  (lambda (a lat)
    (cond
     ((null? lat) (quote ()))
     (else (cond
            ((eq? (car lat) a) (cdr lat))
            (else (cons
                   (car lat)
                   (rember a (cdr lat)))))))))

(rember 'and '(bacon lettuce and tomato))
#+END_SRC

#+RESULTS:
| bacon | lettuce | tomato |

#+BEGIN_SRC scheme :session
(define lat '(soy sauce and tomato sauce))
(define a 'sauce)
(rember a lat)
#+END_SRC

#+RESULTS:
| soy | and | tomato | sauce |

** firsts

- args: a list of non-empty lists (or a null list)
- return: a list composed of the first S-expr of each constituent list

  #+BEGIN_SRC scheme :session
(define firsts
  (lambda (l)
    (cond
     ((null? l) (quote ()))
     (else (cons (car (car l))
                 (firsts (cdr l)))))))

(firsts '((a b) (c d) (e f)))
  #+END_SRC

  #+RESULTS:
  | a | c | e |

** Third Commmandment

When building a list, describe the first typical element, and then ~cons~ it onto the natural recursion.

** insertR

- args:
  + ~new~: atom to insert
  + ~old~: atom to search for
  + ~lat~: list of atoms containing the target
- return: a lat with /new/ inserted to the right of the first occurrence of /old/ in the given lat.
- base: is the lat null?
- goal: when ~car lat~ = ~old~, old::new::(cdr lat)
- recur: (car lat)::(insertR new old (cdr lat)

  #+BEGIN_SRC scheme :session
(define insertR
  (lambda (new old lat)
    (cond
     ((null? lat) (quote ()))
     (else
      (cond
       ((eq? (car lat) old)
        (cons old (cons new (cdr lat))))
        (else
         (cons (car lat)
               (insertR new old (cdr lat)))))))))

  (define new 'topping)
  (define old 'fudge)
  (define lat '(ice cream with fudge for dessert))
  (insertR new old lat)
  #+END_SRC

  #+RESULTS:
  | ice | cream | with | fudge | topping | for | dessert |

** insertL

- args:
  + ~new~: atom to insert
  + ~old~: atom to search for
  + ~lat~: list of atoms containing the target
- return: a lat with ~new~ inserted to the left of the first occurrence of ~old~ in the given ~lat~.
- base: is ~lat~ null?
- goal: when ~car lat~ = ~old~, new::old::(cdr lat)
- recur: (car lat)::(insertL new old (cdr lat))

#+BEGIN_SRC scheme :session
(define insertL
  (lambda (new old lat)
    (cond
     ((null? lat) (quote ()))
     (else
      (cond
       ((eq? (car lat) old)
        (cons new lat))
       (else
        (cons (car lat)
              (insertL new old (cdr lat)))))))))

(insertL new old lat)
#+END_SRC

#+RESULTS:
| ice | cream | with | topping | fudge | for | dessert |

** subst

- args:
  + ~new~: replacement atom
  + ~old~: search atom
  + ~lat~: list of atoms
- return: a lat with ~new~ substituted for ~old~
- base: is ~lat~ null?
- goal: when ~car lat~ = ~old~, new::(cdr lat)
- recur: (car lat)::(subst new old (cdr lat))

#+BEGIN_SRC scheme :session
(define subst
  (lambda (new old lat)
    (cond
     ((null? lat) (quote ()))
     (else
      (cond
       ((eq? (car lat) old)
       (cons new (cdr lat)))
       (else
        (cons (car lat)
              (subst new old (cdr lat)))))))))

(subst new old lat)
#+END_SRC

#+RESULTS:
| ice | cream | with | topping | for | dessert |

** subst2

- args:
  + ~new~: replacemen atom
  + ~o1~, ~o2~: search atoms (either / or)
  + ~lat~: list of atoms
- return: a lat with ~new~ substituted for either the first occurrence of ~o1~ or the first occurrence of ~o2~.
- base: is ~lat~ null?
- goal: when ~car lat~ = either ~o1~ or ~o2~, new::(cdr lat)
- recur: (car lat)::(subst2 new old (cdr lat))

#+BEGIN_SRC scheme :session
(define subst2-DRY
  (lambda (new o1 o2 lat)
    (cond
     ((null? lat) (quote ()))
     (else
      (cond
       ((eq? (car lat) o1)
        (cons new (cdr lat)))
       ((eq? (car lat) o2)
        (cons new (cdr lat)))
       (else
        (cons (car lat)
              (subst2 new o1 o2 (cdr lat)))))))))
#+END_SRC

#+RESULTS:
: #<unspecified>

Notice repeated code: ~(eq? (car lat) o1)~
Can simpify with ~or~

#+BEGIN_SRC scheme :session
(define subst2
  (lambda (new o1 o2 lat)
    (cond
     ((null? lat) (quote ()))
     (else
      (cond
       ((or (eq? (car lat) o1)
            (eq? (car lat) o2))
        (cons new (cdr lat)))
       (else
        (cons (car lat)
              (subst2 new o1 o2 (cdr lat)))))))))

(define new 'vanilla)
(define o1 'chocolate)
(define o2 'banana)
(define lat '(banana ice cream with chocolate topping))

(subst2 new o1 o2 lat)
#+END_SRC

#+RESULTS:
| vanilla | ice | cream | with | chocolate | topping |

** multirember

- args:
  + ~a~: atom to remove
  + ~lat~: list of atoms from which to remove
- return: lat with all occurrences of ~a~ removed
- base: is lat null?
- goal: when ~(eq? (car lat) a)~, recur on ~(cdr lat)~
- recur: (car lat)::(multirember a (cdr lat))

recall ~rember~:

#+BEGIN_SRC scheme :session
(define rember
  (lambda (a lat)
    (cond
     ((null? lat) (quote ()))
     (else (cond
            ((eq? (car lat) a) (cdr lat))
            (else (cons
                   (car lat)
                   (rember a (cdr lat)))))))))
#+END_SRC

#+RESULTS:
: #<unspecified>

The only thing we need to change is to also recur in the first branch of the ~cond~.

#+BEGIN_SRC scheme :session
(define multirember
  (lambda (a lat)
    (cond
     ((null? lat) (quote ()))
     (else (cond
            ((eq? (car lat) a)
             (multirember a (cdr lat)))
            (else
             (cons (car lat)
                   (multirember a (cdr lat)))))))))

(define a 'cup)
(define lat '(coffee cup tea cup and hick cup))
(multirember a lat)
#+END_SRC

#+RESULTS:
| coffee | tea | and | hick |

** multiinsertR

to insert ~new~ to the right of /all/ occurrences of ~old~ in ~lat~ (not just
the first)

recall ~insertR~:

#+BEGIN_SRC scheme :session
(define insertR
  (lambda (new old lat)
    (cond
     ((null? lat) (quote ()))
     (else
      (cond
       ((eq? (car lat) old)
        (cons old (cons new (cdr lat))))
        (else
         (cons (car lat)
               (insertR new old (cdr lat)))))))))
#+END_SRC

#+RESULTS:
: #<unspecified>

what do we need to change?
recur in the first branch of the ~cond~, not just the 2nd

#+BEGIN_SRC scheme :session
(define multiinsertR
  (lambda (new old lat)
    (cond
     ((null? lat) (quote ()))
     (else
      (cond
       ((eq? (car lat) old)
        (cons old
              (cons new
                    (multiinsertR new old (cdr lat)))))
       (else
        (cons (car lat)
              (multiinsertR new old (cdr lat)))))))))

(define lat '(chips and fish or fish and fried))
(define new 'fried)
(define old 'fish)
(multiinsertR new old lat)
#+END_SRC

#+RESULTS:
| chips | and | fish | fried | or | fish | fried | and | fried |

** multiinsertL

#+BEGIN_SRC scheme :session
(define multiinsertL
  (lambda (new old lat)
    (cond
     ((null? lat) (quote ()))
     (else
      (cond
       ((eq? (car lat) old)
        (cons new
              (cons old
                    (multiinsertL new old (cdr lat)))))
       (else
        (cons (car lat)
              (multiinsertL new old (cdr lat)))))))))

(multiinsertL new old lat)
#+END_SRC

#+RESULTS:
| chips | and | fried | fish | or | fried | fish | and | fried |

** multisubst

#+BEGIN_SRC scheme :session
(define multisubst
  (lambda (new old lat)
    (cond
     ((null? lat) (quote ()))
     (else
      (cond
       ((eq? (car lat) old)
        (cons new
              (multisubst new old (cdr lat))))
       (else
        (cons (car lat)
              (multisubst new old (cdr lat)))))))))

(multisubst new old lat)
#+END_SRC

#+RESULTS:
| chips | and | fried | or | fried | and | fried |

** Fourth Commandment

#+begin_quote
Always change at least one argument while recurring. It must be changed to be closer to termination. The changing argument must be tested in the termination condition: when using ~cdr~, test termination with ~null?~.
#+end_quote

* Chapter 4: Numbers Games

#+BEGIN_SRC scheme :session
(define add1
  (lambda (n)
    (+ n 1)))

(add1 67)
#+END_SRC

#+RESULTS:
: 68

#+BEGIN_SRC scheme :session
(define sub1
  (lambda (n)
    (- n 1)))

(sub1 67)
#+END_SRC

#+RESULTS:
: 66

#+BEGIN_SRC scheme :session
(zero? 0)
#+END_SRC

#+RESULTS:
: #t

#+BEGIN_SRC scheme :session
(+ 46 12)
#+END_SRC

#+RESULTS:
: 58

** plus

#+BEGIN_SRC scheme :session
(define plus
  (lambda (x y)
    (cond
     ((zero? y) x)
     (else
      (add1 (plus x (sub1 y)))))))

(plus 3 2)
#+END_SRC

#+RESULTS:
: 5

The function adds two numbers.
Translation to R:

#+BEGIN_SRC R
add1 <- function(x) x + 1
sub1 <- function(x) x - 1

plus <- function(x, y) {
  if (y == 0) x
  else add1(plus(x, sub1(y)))
}

plus(3, 2)
#+END_SRC

#+RESULTS:
: 5

x=3; y=2
plus(3,2)
add1(plus(3,1))
add1(add1(plus(3,0)))
add1(add1(3))
5

~zero?~ for numbers = ~null?~ for lists
~add1~ = ~cons~

#+BEGIN_SRC scheme :session
(define minus
  (lambda (x y)
    (cond
     ((zero? y) x)
     (else
      (sub1 (minus x (sub1 y)))))))

(minus 9 2)
#+END_SRC

#+RESULTS:
: 7

** tuples

list of numbers (or empty list)
equivalent of ~lat~, but for numbers

|                    | lat                 | tuple        |
|--------------------+---------------------+--------------|
|                    | empty list          | empty list   |
|                    | (car lat)+(cdr lat) | number+tuple |
| natural recursion  | (cdr lat)           | (cdr tup)    |
| terminal condition | (null? lat)         | (zero? n)    |

** First Commandment (rev 1)

- When recurring on a list of atoms, ~lat~, ask two questions about it: ~(null? lat)~ and ~else~.
- When recurring on a number, ~n~, ask two questions about it: ~(zero? n)~ and ~else~.

** addtup

Build a number by totaling all the numbers in a tup:

#+BEGIN_SRC scheme :session
(define addtup
  (lambda (tup)
    (cond
     ((null? tup) 0)
     (else
      (plus (car tup)
            (addtup (cdr tup)))))))

(addtup '(3 6 2 8))
#+END_SRC

#+RESULTS:
: 19

** Fourth Commandment (rev 1)

Always change at least one argument while recurring. It must be changed to be closer to termination. The changing argument must be tested in the termination condition:
- when using cdr, test termination with ~null?~
- when using sub1, test termination with ~zero?~

** times

If the multiplier (y) is 0, return 0
Else, add the multiplicand (x) to (x times y-1)

#+BEGIN_SRC scheme :session
; multiply x by y
(define times
  (lambda (x y)
    (cond
     ((zero? y) 0)
     (else
      (plus x (times x (sub1 y)))))))

(times 4 3)
#+END_SRC

#+RESULTS:
: 12

(times 12 3) = 12 + (times 12 2)
             = 12 + 12 + (times 12 1)
             = 12 + 12 + 12 + (times 12 0)
             = 12 + 12 + 12 + 0
             = 36

** Fifth Commandment

- When building a value with ~plus~, always use 0 for the value of the terminating line, for adding 0 does not change the value of an addition.
- When building a value with ~times~, always use 1 for the value of the terminating line, for multiplying by 1 does not change the value of a multiplication.
- When building a value with ~cons~, always consider () for the value of the terminating line.

** add2tups

Add the corresponding elements of two equal-length tups,
returning a new tup of the same length.

#+BEGIN_SRC scheme :session
(define add2tups
  (lambda (tup1 tup2)
    (cond
     ((and (null? tup1)
           (null? tup2))
      (quote()))
     (else
      (cons
       (plus (car tup1)
             (car tup2))
       (add2tups (cdr tup1)
                 (cdr tup2)))))))

(define tup1 '(3 6 9 11 4))
(define tup2 '(8 5 2 0 7))
(add2tups tup1 tup2)
#+END_SRC

#+RESULTS:
| 11 | 11 | 11 | 11 | 11 |

** add2tups-any

Same as ~add2tups~ but works for any two tups even if unequal lengths.

#+BEGIN_SRC scheme :session
(define add2tups-any
  (lambda (tup1 tup2)
    (cond
     ((null? tup1) tup2)
     ((null? tup2) tup1)
     (else
      (cons
       (plus (car tup1)
             (car tup2))
       (add2tups-any (cdr tup1)
                     (cdr tup2)))))))

(define tup1 '(3 7))
(define tup2 '(4 6 8 1))
(add2tups-any tup1 tup2)
#+END_SRC

#+RESULTS:
| 7 | 13 | 8 | 1 |

** gt

#+BEGIN_SRC scheme :session
(define gt
  (lambda (n m)
    (cond
     ((zero? n) #f)
     ((zero? m) #t)
     (else
      (gt (sub1 n) (sub1 m))))))

(gt 133 12)
#+END_SRC

#+RESULTS:
: #t

** lt

#+BEGIN_SRC scheme :session
(define lt
  (lambda (n m)
    (cond
     ((zero? m) #f)
     ((zero? n) #t)
     (else
      (lt (sub1 n) (sub1 m))))))

(lt 133 12)
#+END_SRC

#+RESULTS:
: #f

** eq

Test the equality of two numeric atoms.

Recall, ~eq?~ tests equality of non-numeric atoms.

#+BEGIN_SRC scheme :session
(define eq
  (lambda (n m)
    (cond
     ((zero? m) (zero? n))
     ((zero? n) #f)
     (else
      (eq (sub1 n) (sub1 m))))))

(eq 3 2)
#+END_SRC

#+RESULTS:
: #f

Define ~eq~ in terms of ~gt~ and ~lt~:

#+BEGIN_SRC scheme :session
(define eq'
  (lambda (n m)
    (cond
     ((gt n m) #f)
     ((lt n m) #f)
     (else #t))))

(eq' 2 3)
#+END_SRC

#+RESULTS:
: #f

** expt - raise number to an exponent

If the exponent is 0, return 1.
Else, multiply the number by the number raised to (exponent minus 1)

#+BEGIN_SRC scheme :session
(define expt'
  (lambda (n m)
    (cond
     ((zero? m) 1)
     (else
      (times n (expt' n (sub1 m)))))))

(expt' 2 3)
#+END_SRC

#+RESULTS:
: 8

** quotient

If the divisor (n) is less than the dividend (m), return 0
Else, divide (n - m) by m, then add 1 to the result.

#+BEGIN_SRC scheme :session
(define quotient'
  (lambda (n m)
    (cond
     ((lt n m) 0)
     (else
      (add1 (quotient'
             (minus n m) m))))))

(quotient' 10 2)
#+END_SRC

#+RESULTS:
: 5

(quotient' 15 4) = 1 + (quotient' 11 4)
                 = 1 + (1 + (quotient' 7 4))
                 = 1 + (1 + (1 + (quotient' 3 4))
                 = 1 + (1 + (1 + 0))
                 = 3

** length

If lat is empty, return 0
Else, 1 + (length (cdr lat))

#+BEGIN_SRC scheme :session
(define length
  (lambda (lat)
    (cond
     ((null? lat) 0)
     (else
      (add1 (length (cdr lat)))))))

(define lat1 '(ham and cheese on rye))
(length lat1)
#+END_SRC

#+RESULTS:
: 5

** pick

If n=1, return (car lat)
Else, return (pick (n-1) (cdr lat))

#+BEGIN_SRC scheme :session
(define pick
  (lambda (n lat)
    (cond
     ((zero? (sub1 n)) (car lat))
     (else
      (pick (sub1 n) (cdr lat))))))

(define lat '(lasagna spaghetti ravioli macaroni meatball))
(pick 4 lat)
#+END_SRC

#+RESULTS:
: macaroni

** rempick

Remove a member of a lat

- If n=1, return (cdr lat)
- Else, cons (car lat) onto (rempick (cdr lat))

#+BEGIN_SRC scheme :session
(define rempick
  (lambda (n lat)
    (cond
     ((zero? (sub1 n)) (cdr lat))
     (else
      (cons (car lat)
            (rempick (sub1 n) (cdr lat)))))))

(define lat '(hotdogs with hot mustard))
(rempick 3 lat)
#+END_SRC

#+RESULTS:
| hotdogs | with | mustard |

** no-nums

Return a lat with all the numbers removed from the input lat.

- If lat is null, return empty list
- If (car lat) is a number, return (no-nums (cdr lat))
- Else, cons (car lat) onto (no-nums (cdr lat))

#+BEGIN_SRC scheme :session
(define no-nums
  (lambda (lat)
    (cond
     ((null? lat) ( quote() ))
     (else
      (cond
       ((number? (car lat)) (no-nums (cdr lat)))
       (else
        (cons (car lat)
              (no-nums (cdr lat)))))))))

(define lat '(5 pears 6 prunes 9 dates))
(no-nums lat)
#+END_SRC

#+RESULTS:
| pears | prunes | dates |

** all-nums

Return a lat with ONLY the numbers from the input list.

- If lat is null, return empty list
- If (car lat) is a number, cons (car lat) onto (all-nums (cdr lat))
- Else, return (all-nums (cdr lat))

#+BEGIN_SRC scheme :session
(define all-nums
  (lambda (lat)
    (cond
     ((null? lat) (quote()))
     (else
      (cond
       ((number? (car lat)) (cons (car lat)
                                  (all-nums (cdr lat))))
       (else
        (all-nums (cdr lat))))))))

(all-nums lat)
#+END_SRC

#+RESULTS:
| 5 | 6 | 9 |

** eqan?

Tests the equality of /any/ two atoms.

Recall, ~eq?~ tests equality of non-numeric atoms, and ~eq~ tests equality of numeric atoms.

- If the atoms are both numbers, return (eq a1 a2).
- Then, if either is a number, return false.
- Else, they both must be non-numeric, therefore return (eq? a1 a2).

#+BEGIN_SRC scheme :session
(define eqan?
  (lambda (a1 a2)
    (cond
     ((and (number? a1) (number? a2)) (eq a1 a2))
     ((or  (number? a1) (number? a2)) #f)
     (else
      (eq? a1 a2)))))

(eq? 'a 1)
#+END_SRC

#+RESULTS:
: #f

** occur

Counts the number of times an atom appears in a lat.

- If lat is null, return 0
- Else:
  + If (car lat) equals the atom, recur on (cdr lat) plus 1
  + Else, recur on cdr lat

#+BEGIN_SRC scheme :session
(define occur
  (lambda (a lat)
    (cond
     ((null? lat) 0)
     (else
      (cond
       ((eq? (car lat) a)
        (add1 (occur a (cdr lat))))
       (else
        (occur a (cdr lat))))))))

(define lat '(bacon and eggs and hot sauce))
(occur 'and lat)
#+END_SRC

#+RESULTS:
: 2

** one?

Test if a numeric atom is 1.

- If the atom is zero, return false.
- Else, return true if the atom minus is zero, otherwise false.
- No recursion!

#+BEGIN_SRC scheme :session
(define one?
  (lambda (n)
    (cond
     ((zero? n) #f)
     (else
      (zero? (sub1 n))))))

; can be simplified!
(define one?? (lambda (n) (eq n 1)))

(one?? 1)
#+END_SRC

#+RESULTS:
: #t

** rempick'

Recall ~rempick~, which removes the nth atom from a list. Rewrite ~rempick~ using ~one?~.

#+BEGIN_SRC scheme :session
(define rempick'
  (lambda (n lat)
    (cond
     ((one? n) (cdr lat))
     (else
      (cons (car lat)
            (rempick' (sub1 n) (cdr lat)))))))

(define lat '(lemon meringue salty pie))
(rempick' 3 lat)
#+END_SRC

#+RESULTS:
| lemon | meringue | pie |

* Chapter 5: *Oh my Gawd*: It's Full of Stars

** rember*

Remove an atom from a list. Works on any list, even nested lists, not just lists of atoms.

#+BEGIN_SRC scheme :session
(define rember*
  (lambda (a l)
    (cond
     ((null? l) (quote()))
     ((atom? (car l))
      (cond
       ((eq? (car l) a) (rember* a (cdr l)))
       (else
        (cons (car l)
              (rember* a (cdr l))))))
     (else
      (cons (rember* a (car l))
            (rember* a (cdr l)))))))

(define l '(((tomato sauce)) ((bean) sauce) (and ((flying)) sauce)))
(rember* 'sauce l)
#+END_SRC

#+RESULTS:
| (tomato) |            |
| (bean)   |            |
| and      | ((flying)) |
